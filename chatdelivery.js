const qrcode = require('qrcode-terminal');
const { Client } = require('whatsapp-web.js');
const fs = require('fs');

const client = new Client();

client.on('qr', qr => {
  qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
  console.log('WhatsApp conectado. Tudo pronto, mestre jedi! üöÄü§ñ');
});

client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

let aguardandoNome = false;
let nome = '';
let aguardandoFormaPagamento = false;
let formaPagamento = '';
let aguardandoValorTroco = false;
let aguardandoObservacao = false;
let observacao = '';
let aguardandoObservacaoTexto = false;
let valorTroco = '';
let aguardandoTroco = false;
let pedidosite = '';
let link = 'https://tonysilva22.github.io/cardapio-online/';
          
// Fun√ß√µes auxiliares

function salvarResumoPedido(resumo) {
  fs.appendFile('resumos.txt', resumo + '\n', (err) => {
    if (err) {
      console.error('Erro ao salvar o resumo do pedido:', err);
    } else {
      console.log('Resumo do pedido salvo com sucesso!');
    }
  });
}

function cumprimentar() {
  const dataAtual = new Date();
  const hora = dataAtual.getHours();

  let saudacao;

  if (hora >= 6 && hora < 12) {
    saudacao = "Bom dia!";
  } else if (hora >= 12 && hora < 17) {
    saudacao = "Boa tarde!";
  } else {
    saudacao = "Boa noite!";
  }

  return saudacao;
}

function getNomeCliente(numero) {
  try {
    const data = fs.readFileSync('contatos.txt', 'utf8');
    const linhas = data.split('\n');
    for (const linha of linhas) {
      const [num, nome] = linha.split(',');
      if (num === numero) {
        return nome;
      }
    }
  } catch (err) {
    return null;
  }
  return null;
}

function salvarNomeCliente(numero, nome) {
  const data = `${numero},${nome}\n`;
  fs.appendFileSync('contatos.txt', data, { flag: 'a+' });
  console.log(`Salvo ${numero},${nome}\n`);
}


client.on('message', async (msg) => {
  const nomeCliente = getNomeCliente(msg.from);
  const lowerCaseMsg = msg.body.toLowerCase();

  if (msg.body === 'Boa tarde' || msg.body === 'boa tarde' || msg.body === 'BOA TARDE' ||
      msg.body === 'Boa noite' || msg.body === 'boa noite' || msg.body === 'BOA NOITE' ||
      msg.body === 'Oi' || msg.body === 'oi' || msg.body === 'OI' || msg.body === 'Ol√°' || msg.body === 'ola' ||
      msg.body === 'Ola' || msg.body === 'OL√Å' || msg.body === 'OLA' || msg.body === '') {

    if (nomeCliente && msg.from.endsWith('@c.us')) {
      await client.sendMessage(msg.from, `*${cumprimentar()} ${nomeCliente}!* üëãüèº\n\nBem-vindo ao nosso restaurante! Como posso ajudar voc√™ hoje? üçîüçüü•§\n\n1Ô∏è‚É£ Ver o card√°pio\n2Ô∏è‚É£ Conferir nossos hor√°rios de funcionamento\n`);
    } else {
      await client.sendMessage(msg.from, `${cumprimentar()} Seja bem-vindo(a) ao nosso restaurante! üòä\n\nAntes de prosseguirmos, por favor, poderia me informar o seu nome?`);
      aguardandoNome = true;
    }
  } else if (aguardandoNome && msg.from.endsWith('@c.us')) {
    nome = msg.body;
    aguardandoNome = false;
    salvarNomeCliente(msg.from, nome);
    await client.sendMessage(msg.from, `${nome}! üòÑ\n\nQue √≥timo ter voc√™ aqui! Estou √† disposi√ß√£o para ajudar. Como posso tornar sua experi√™ncia incr√≠vel hoje? üçîüåü\n\n1Ô∏è‚É£ Ver o card√°pio\n2Ô∏è‚É£ Conferir nossos hor√°rios de funcionamento\n`);
  } else if ((msg.body === '1' || lowerCaseMsg === 'ver o card√°pio') && msg.from.endsWith('@c.us')) {
    await client.sendMessage(msg.from, `Certo, ${nomeCliente}, vou enviar o link do card√°pio:\n*${link}*`);
    aguardandoFormaPagamento = true;
  } else if (aguardandoFormaPagamento && msg.from.endsWith('@c.us')) {
    pedidosite = msg.body;
    await client.sendMessage(msg.from, '√ìtimo! Agora, por favor, informe a forma de pagamento:\n*Pix*\n*Cart√£o*\n*Dinheiro*');
    aguardandoFormaPagamento = false;
 
  }


  else if (msg.body.toLowerCase() === 'pix') {
    const chat = await msg.getChat();
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    formaPagamento = 'Pix';
    await client.sendMessage(msg.from,`üåü Perfeito, ${nomeCliente}! Agora voc√™ est√° quase l√°. Para concluir o pagamento, utilize a nossa chave Pix: *ljihghv*. üì±üí∏\n\nAssim que recebermos a confirma√ß√£o do pagamento, seu pedido ser√° preparado com todo carinho!`
  );
  
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    await client.sendMessage(msg.from,`üìù Se tiver alguma observa√ß√£o para o pedido, digite 3Ô∏è‚É£.\n\n *Exemplo: 'Mais sorvete e menos a√ßa√≠.'* \n\nSe n√£o houver observa√ß√µes, digite 0Ô∏è‚É£ paraprosseguir.`);
    
    aguardandoObservacao = true;
    }


    
    else if (msg.body.toLowerCase() === 'cart√£o') {
    formaPagamento = 'Cart√£o';
    await client.sendMessage(msg.from, `Se voc√™ tiver alguma Observa√ß√£o, digite 3Ô∏è‚É£.\n\nExemplo: '1 hamb√∫rguer no ponto m√©dio, com queijo cheddar e maionese extra!'\n\nOu, para prosseguir com o pedido, digite 0Ô∏è‚É£.`);
    aguardandoObservacao = true;
}
  
   else if (aguardandoObservacao && msg.body.toLowerCase() === '3') {
    const chat = await msg.getChat();
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    await client.sendMessage(msg.from, `Qual √© a sua Observa√ß√£o?`);
    aguardandoObservacaoTexto = true;
 
  } else if (aguardandoObservacaoTexto) {
    const chat = await msg.getChat();
    observacao = msg.body;
    aguardandoObservacaoTexto = false;
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    await client.sendMessage(msg.from, `Est√° correto?\n\n *${observacao}* \n\n Digite  0Ô∏è‚É£ para confirmar`);
  

  } else if (msg.body.toLowerCase() === 'dinheiro') {
    const chat = await msg.getChat();
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    formaPagamento = 'Dinheiro';
    await client.sendMessage(msg.from,`üíµ Para facilitar a entrega, precisaremos saber se voc√™ precisa de troco. Por favor, escolha uma das op√ß√µes abaixo:\n\n*Sim*, preciso de troco\n*N√£o*, n√£o preciso de troco`);
  
    aguardandoTroco = true;
  
  
  
  } else if (aguardandoTroco && msg.from.endsWith('@c.us')) {
    const lowerCaseMsg = msg.body.toLowerCase();
    const chat = await msg.getChat();
    if (lowerCaseMsg === 'n√£o' || lowerCaseMsg === 'n√£o preciso') {
      await delay(2000);//delay de 3 segundos
      await chat.sendStateTyping();// Simulando Digita√ß√£o
      await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
      await client.sendMessage(msg.from, `Se voc√™ tiver alguma Observa√ß√£o, digite 3Ô∏è‚É£.\n\nExemplo: '1 hamb√∫rguer no ponto m√©dio, com queijo cheddar e maionese extra!'\n\nOu, para prosseguir com o pedido, digite 0Ô∏è‚É£.`);
      aguardandoTroco = false;
  
  
    } else if (lowerCaseMsg === 'sim' || lowerCaseMsg === 'preciso') {
      const chat = await msg.getChat();
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    await client.sendMessage(msg.from,`üíµ Certo, Para agilizar o processo de entrega, por favor, informe o valor para o troco. Voc√™ pode usar o seguinte exemplo como refer√™ncia:\n\n*EXEMPLO: Preciso de troco para R$ 100,00*`
  );
      aguardandoValorTroco = true;
      aguardandoTroco = false;
    }
    
  } else if (aguardandoValorTroco && msg.from.endsWith('@c.us')) {
    const chat = await msg.getChat();
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
       valorTroco = msg.body;
    if (!isNaN(valorTroco) && valorTroco > 0) {
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    await client.sendMessage(msg.from, `Se voc√™ tiver alguma Observa√ß√£o, digite 3Ô∏è‚É£.\n\nExemplo: '1 hamb√∫rguer no ponto m√©dio, com queijo cheddar e maionese extra!'\n\nOu, para prosseguir com o pedido, digite 0Ô∏è‚É£.`);
    aguardandoObservacao = true;
    aguardandoValorTroco = false;
    
    }

  } else if ((msg.body.toLowerCase() === 'finalisz' || msg.body === '0') && msg.from.endsWith('@c.us')) {
    const chat = await msg.getChat();
    await delay(2000);//delay de 3 segundos
    await chat.sendStateTyping();// Simulando Digita√ß√£o
    await delay(4000);//Delay de 3000 milisegundos mais conhecido como 3 segundos
    //------------------------------------------------------------------------------------------------------------
    const dataAtual = new Date();
    const dataFormatada = dataAtual.toLocaleDateString();
    const horaFormatada = dataAtual.toLocaleTimeString();

    let resumo = `*Resumo do Pedido de ${nomeCliente}:*\n`;
    resumo += `Data: ${dataFormatada} - Hora: ${horaFormatada}\n\n`;
    resumo += `Forma de Pagamento: ${formaPagamento}\n`;
    resumo += `${pedidosite}\n\n`;
    if (observacao.trim() !== '') {
      resumo += `*Observacao*: ${observacao}\n\n`;
    }
    resumo += `\n*Perfeito, ${nomeCliente}! Seu pedido foi registrado e est√° sendo processado.*\n`;
    resumo += `Agradecemos por escolher nosso restaurante! Voc√™ ser√° informado sobre o status da entrega em breve.`;
    await client.sendMessage(msg.from, resumo);
    const otherNumber = '55';
    await client.sendMessage(otherNumber + '@c.us', resumo);
    console.log('resuno do pedido enviado para tony')
    salvarResumoPedido(resumo);

}
   if ((msg.body === '2' || msg.body.toLowerCase() === 'Hor√°rio de Funcionamento') && msg.from.endsWith('@c.us')) {
  await client.sendMessage(msg.from, `‚è∞ Hor√°rio de Funcionamento:\n\nüìÖ Segunda a Quinta: 13h √†s 21h\nüìÖ Sexta: 13h √†s 17h\nüìÖ S√°bado: 18h √†s 22h\nüìÖ Domingo: 13h √†s 22h\n\nEstamos ansiosos para atend√™-lo(a)! Caso queira fazer um pedido, digite 1Ô∏è‚É£.`);

 }


});
